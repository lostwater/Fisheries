@model Fisheries.Models.Information
@{
    var infoId = Model.Id;
    ViewBag.Title = "详细内容";
}

@Scripts.Render("~/bundles/jqueryform")
@Scripts.Render("~/bundles/jcrop")
@Scripts.Render("~/bundles/events")
@Styles.Render("~/Content/jcrop")
@Styles.Render("~/Content/info")

@Styles.Render("~/Content/css")
@Scripts.Render("~/bundles/modernizr")


<h2>编辑</h2>
@*@using (Ajax.BeginForm("_Upload", "ImageUploader", new AjaxOptions() { HttpMethod = "POST" }, new { enctype = "multipart/form-data" }))*@
@using (Ajax.BeginRouteForm("Default", new { controller = "ImageUploader", action = "_Upload" }, new AjaxOptions() { HttpMethod = "POST" }, new { enctype = "multipart/form-data", id = "avatar-upload-form" }))

{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>资讯</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="files" /><br>
                <div class="upload-file-notice">最大大小: <span id="avatar-max-size"></span> MB</div>
                <div id="avatar-upload-box">
                    <div class="upload-progress col-md-6 hidden">
                        <div class="upload-percent-value pull-left">0%</div>
                        <div class="upload-percent-bar pull-left"></div>
                    </div>
                    <div id="upload-status"></div>
                </div>
                <div id="avatar-crop-box" class="hidden">
                    <p>
                        <div>
                            <img src="" id="crop-avatar-target" alt="Uploaded image" />
                        </div>
                        <div id="preview-pane" class="hidden">
                            <div class="preview-container"  >

                                <img src="" class="jcrop-preview hidden" alt="Preview"   />
                            </div>
                        </div>
                    </p>
                    <p><button class="btn btn-default" onclick="saveAvatar('2');">保存</button></p>
                </div>
                @*<div id="avatar-result" class="">
                        <img src="@Model.AvatarUrl" alt="Final Image" />
                    </div>*@
            </div>
        </div>
    </div>

}

@using (Html.BeginForm(Html.BeginForm("Edit", "Information", FormMethod.Post, new { enctype = "multipart/form-data" , id = "information-edit-form"}))) 
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
       
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div id="avatar-result" class="col-md-10">
                <img src="@Model.ImageUrl" alt="Final Image" />
                @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "hidden" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InformationTypeId, "信息类型", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("InformationTypeId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.InformationTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Intro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Intro, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Intro, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="button" value="修改图片" onclick="showUpload" />
                @Html.TextBoxFor(model => model.Image, new { type = "file" })
                @Html.ValidationMessageFor(model => model.Image)
                <!--<input type="file"  class="btn btn-default"  accept="image/*"  />-->
                <!--<input type="submit" value="ImageUpload" class="btn btn-default" />-->
            </div>
            <div class="col-md-10">

            </div>
        </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.IsPublished, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsPublished)
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
               @(Html.Kendo().EditorFor(model => model.Content)
      .Encode(false)
      .HtmlAttributes(new { style = "height:440px" })
      .Resizable(resizable => resizable.Content(true).Toolbar(true))
      .Value(Model.Content)
      .Tools(tools => tools.CustomButton(cb => cb.Name("custom").ToolTip("Insert a horizontal rule").Exec("onCustomToolClick")))
      .ImageBrowser(imageBrowser => imageBrowser
      .Image("~/InformationFiles/" + infoId.ToString() + "/{0}")
      .Read("MyRead", "ImageBrowser", new { id = infoId })
      .Create("MyCreate", "ImageBrowser", new { id = infoId })
      .Destroy("MyDestroy", "ImageBrowser", new { id = infoId })
      .Upload("MyUpload", "ImageBrowser", new { id = infoId })
      .Thumbnail("MyThumbnail", "ImageBrowser", new { id = infoId })
      )
                 )
            </div>
        </div>

        

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="保存" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    function showUpload(e)
    {
        $("#avatar-upload-form").removeClass("hidden");
    }
    function execFunction(e) {
        var editor = $(this).data("kendoEditor");
        editor.exec("inserthtml", { value: "<hr />" });
    }
    function onCustomToolClick(e) {
        var popupHtml =
            '<div class="k-editor-dialog k-popup-edit-form k-edit-form-container" style="width:auto;">' +
              '<div style="padding: 0 1em;">' +
                '<p><textarea cols="60" rows="10" style="width:90%"></textarea></p>' +
              '</div>' +
              '<div class="k-edit-buttons k-state-default">' +
                '<button class="k-dialog-insert k-button k-primary">Insert</button>' +
                '<button class="k-dialog-close k-button">Cancel</button>' +
              '</div>' +
            '</div>';

        var editor = $(this).data("kendoEditor");

        // create a modal Window from a new DOM element
        var popupWindow = $(popupHtml)
        .appendTo(document.body)
        .kendoWindow({
            // modality is recommended in this scenario
            modal: true,
            width: 600,
            resizable: false,
            title: "Insert custom content",
            // ensure opening animation
            visible: false,
            // remove the Window from the DOM after closing animation is finished
            deactivate: function (e) { e.sender.destroy(); }
        }).data("kendoWindow")
        .center().open();

        // insert the new content in the Editor when the Insert button is clicked
        popupWindow.element.find(".k-dialog-insert").click(function () {
            var customHtml = popupWindow.element.find("textarea").val();
            //customHtml = "<body>" + customHtml + "</body>";
            editor.exec("inserthtml", { value: customHtml });
        });

        // close the Window when any button is clicked
        popupWindow.element.find(".k-edit-buttons button").click(function () {
            // detach custom event handlers to prevent memory leaks
            popupWindow.element.find(".k-edit-buttons button").off();
            popupWindow.close();
        });
    }
    
           
</script>
